# Copyright 2021 EPAM Systems
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - README.md
      - README_TEMPLATE.md
      - gradle.properties
      - CHANGELOG.md

env:
  VERSION_FILE: agent-android-junit5/gradle.properties
  VERSION_EXTRACT_PATTERN: '(?<=version=).+'
  GH_USER_NAME: github.actor
  CHANGE_LOG_FILE: CHANGELOG.md
  CHANGE_LOG_TMP_FILE: CHANGELOG_updated.md
  README_FILE: README.md
  README_TEMPLATE_FILE: README_TEMPLATE.md
  README_VERSION_PLACEHOLDER: $LATEST_VERSION
  RELEASE_BRANCH: main
  DEVELOP_BRANCH: develop

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate versions
        uses: HardNorth/github-version-generate@v1.1.0
        with:
          version-source: file
          version-file: ${VERSION_FILE}
          version-file-extraction-pattern: ${{ env.VERSION_EXTRACT_PATTERN }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup git credentials
        uses: oleksiyrudenko/gha-git-credentials@v2
        with:
          name: 'reportportal.io'
          email: 'support@reportportal.io'
          token: ${{ secrets.GH_TOKEN }}

      - name: Release with Gradle
        id: release
        run: |
          ./gradlew release -PreleaseMode -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=${{env.RELEASE_VERSION}} \
          -Prelease.newVersion=${{env.NEXT_VERSION}} -PbintrayUser=${{secrets.BINTRAY_USER}} -PbintrayApiKey=${{secrets.BINTRAY_API_KEY}} \
          -PgithubUserName=${{env.GH_USER_NAME}} -PgithubToken=${{secrets.GITHUB_TOKEN}}

      - name: Update README.md
        id: readmeUpdate
        run: |
          sed 's/${{env.README_VERSION_PLACEHOLDER}}/${{env.RELEASE_VERSION}}/g' ${{env.README_TEMPLATE_FILE}} > ${{env.README_FILE}}
          git add ${{env.README_FILE}}
          git commit -m "Readme update"

      - name: Update CHANGELOG.md
        id: changelogUpdate
        run: |
          sed '/\[Unreleased\]/q' ${{ env.CHANGE_LOG_FILE }} >> ${{ env.CHANGE_LOG_TMP_FILE }}
          sed -E '1,/#?#\s*\[Unreleased\]/d' ${{ env.CHANGE_LOG_FILE }} | sed -E '/#?#\s*\[/q' | \
          { echo -e '\n## [${{env.RELEASE_VERSION}}]'; sed '$d'; } >> ${{ env.CHANGE_LOG_TMP_FILE }}
          grep -E '#?#\s*\[[0-9]' ${{ env.CHANGE_LOG_FILE }} | head -n1 >> ${{ env.CHANGE_LOG_TMP_FILE }}
          sed -E '1,/#?#\s*\[[0-9]/d' ${{ env.CHANGE_LOG_FILE }} >> ${{ env.CHANGE_LOG_TMP_FILE }}
          rm ${{ env.CHANGE_LOG_FILE }}
          mv ${{ env.CHANGE_LOG_TMP_FILE }} ${{ env.CHANGE_LOG_FILE }}
          git add ${{ env.CHANGE_LOG_FILE }}
          git commit -m "Changelog update"
          git push

      - name: Read changelog Entry
        id: readChangelogEntry
        uses: mindsers/changelog-reader-action@v1.3.1
        with:
          version: ${{ env.RELEASE_VERSION }}
          path: ./${{ env.CHANGE_LOG_FILE }}

      - name: Create Release
        id: createRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: ${{ steps.readChangelogEntry.outputs.log_entry }}
          draft: false
          prerelease: true

      - name: Checkout develop branch
        if: ${{github.ref}} == ${{env.RELEASE_BRANCH}}
        uses: actions/checkout@v2
        with:
          ref: ${{env.DEVELOP_BRANCH}}
          fetch-depth: 0

      - name: Merge release branch into develop
        id: mergeIntoDevelop
        if: ${{github.ref}} == ${{env.RELEASE_BRANCH}}
        run: |
          git merge -m 'Merge release branch into develop after a release' origin/${{env.RELEASE_BRANCH}}
          git status | (! grep -Fq 'both modified:') || git status | grep -F 'both modified:' \
          | { echo -e 'Unable to merge release into develop, merge conflicts:'; (! grep -Eo '[^ ]+$') }
          git push origin ${{env.DEVELOP_BRANCH}}
