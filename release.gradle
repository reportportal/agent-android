/*
 * Copyright 2021 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'net.researchgate.release'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set("javadoc")
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

project.ext.githubUserName = project.hasProperty('githubUserName') ? githubUserName : ""
project.ext.githubToken = project.hasProperty('githubToken') ? githubToken : ""

publishing {
    publications {
        release(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            artifact javadocJar

            pom {
                name = project.name
                description = project.description

                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                // Include transitive dependencies
                withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    project.configurations.implementation
                            .allDependencies
                            .findAll { it.name != "unspecified" }
                            .each {
                                def dependencyNode = dependenciesNode.appendNode("dependency")
                                dependencyNode.appendNode("groupId", it.group)
                                dependencyNode.appendNode("artifactId", it.name)
                                dependencyNode.appendNode("version", it.version)
                                dependencyNode.appendNode("scope", "runtime")
                            }
                }
            }
        }
    }

    repositories {
        maven {
            name = "agent-android"
            url = uri("https://maven.pkg.github.com/reportportal/agent-android")
            credentials {
                username = githubUserName
                password = githubToken
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['release']
    publish = true
    pkg {
        repo = 'reportportal'
        name = "$project.name"
        desc = "$project.description"
        websiteUrl = 'https://reportportal.github.io/'
        issueTrackerUrl = "https://github.com/reportportal/$rootProject.name/issues"
        vcsUrl = "https://github.com/reportportal/$rootProject.name"
        githubRepo = "reportportal/$rootProject.name"
        githubReleaseNotesFile = 'CHANGELOG.md'

        userOrg = 'epam'
        licenses = ['Apache-2.0']
    }
}

release {
    git {
        requireBranch = 'main'
    }
}

afterEvaluate {
    def releaseDependencies = [bintrayUpload, publish]
    releaseDependencies.addAll(afterReleaseBuild.getDependsOn())
    afterReleaseBuild.setDependsOn(releaseDependencies)
}
